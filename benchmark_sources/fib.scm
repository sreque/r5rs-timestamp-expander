(define-syntax ??!apply (syntax-rules (??!lambda) ((_ (??!lambda (bound-var . other-bound-vars) body) oval . other-ovals) (letrec-syntax ((subs (syntax-rules (??! bound-var ??!lambda) ((_ val k (??! bound-var)) (appl k val)) ((_ val k (??!lambda bvars int-body)) (subs-in-lambda val bvars (k bvars) int-body)) ((_ val k (x)) (subs val (recon-pair val k ()) x)) ((_ val k (x . y)) (subs val (subsed-cdr val k x) y)) ((_ val k x) (appl k x)))) (subsed-cdr (syntax-rules () ((_ val k x new-y) (subs val (recon-pair val k new-y) x)))) (recon-pair (syntax-rules () ((_ val k new-y new-x) (appl k (new-x . new-y))))) (subs-in-lambda (syntax-rules (bound-var) ((_ val () kp int-body) (subs val (recon-l kp ()) int-body)) ((_ val (bound-var . obvars) (k bvars) int-body) (appl k (??!lambda bvars int-body))) ((_ val (obvar . obvars) kp int-body) (subs-in-lambda val obvars kp int-body)))) (recon-l (syntax-rules () ((_ (k bvars) () result) (appl k (??!lambda bvars result))))) (appl (syntax-rules () ((_ (a b c d) result) (a b c d result)) ((_ (a b c) result) (a b c result)))) (finish (syntax-rules () ((_ () () exp) exp) ((_ rem-bvars rem-ovals exps) (??!apply (??!lambda rem-bvars exps) . rem-ovals))))) (subs oval (finish other-bound-vars other-ovals) body)))))
(define-syntax ?car (syntax-rules () ((_ (x . y) k) (??!apply k x))))
(define-syntax ?cdr (syntax-rules () ((_ (x . y) k) (??!apply k y))))
(define-syntax ?cons (syntax-rules () ((_ x y k) (??!apply k (x . y)))))
(define-syntax ?null? (syntax-rules () ((_ () k) (??!apply k #t)) ((_ x k) (??!apply k #f))))
(define-syntax ?ifnull? (syntax-rules () ((_ () kt kf) (??!apply kt #t)) ((_ x kt kf) (??!apply kf #f))))
(define-syntax ?pair? (syntax-rules () ((_ (a . b) k) (??!apply k #t)) ((_ not-pair k) (??!apply k #f))))
(define-syntax ?ifpair? (syntax-rules () ((_ (a . b) kt kf) (??!apply kt #t)) ((_ not-pair kt kf) (??!apply kf #f))))
(define-syntax ?true? (syntax-rules () ((_ x k) (??!apply k x))))
(define-syntax ?iftrue? (syntax-rules () ((_ #f kt kf) (??!apply kf #f)) ((_ x kt kf) (??!apply kt #t))))
(define-syntax ?append (syntax-rules () ((_ (x |...|) (y |...|) k) (??!apply k (x |...| y |...|)))))
(define-syntax ?ifeq? (syntax-rules () ((_ (x . y) b kt kf) (??!apply kf #f)) ((_ () b kt kf) (??!apply kf #f)) ((_ a b _kt _kf) (let-syntax ((aux (syntax-rules (a) ((_ a kt kf) (??!apply kt #t)) ((_ other kt kf) (??!apply kf #f))))) (aux b _kt _kf)))))
(define-syntax ?ifmemq? (syntax-rules () ((_ a lst kt kf) (?ifpair? lst (??!lambda (_) (?car lst (??!lambda (x) (?ifeq? a (??! x) (??!lambda (_) (??!apply kt #t)) (??!lambda (_) (?cdr lst (??!lambda (tail) (?ifmemq? a (??! tail) kt kf)))))))) (??!lambda (_) (??!apply kf #f))))))
(define-syntax ?number-zero (syntax-rules () ((_ k) (??!apply k ()))))
(define-syntax ?number-two (syntax-rules () ((_ k) (??!apply k ((()))))))
(define-syntax ?number-one (syntax-rules () ((_ k) (??!apply k (())))))
(define-syntax ?incr (syntax-rules () ((_ n k) (??!apply k (n)))))
(define-syntax ?decr (syntax-rules () ((_ (n) k) (??!apply k n))))
(define-syntax ?less-than-two? (syntax-rules () ((_ ((n)) k) (??!apply k #f)) ((_ x k) (??!apply k #t))))
(define-syntax ?ifless-than-two? (syntax-rules () ((_ ((n)) kt kf) (??!apply kf #f)) ((_ x kt kf) (??!apply kt #t))))
(define-syntax ?+ (syntax-rules () ((_ x (y) k) (?+ x y (??!lambda (v) (?incr (??! v) k)))) ((_ x () k) (!!?apply k x))))
(define-syntax ?number-zero? (syntax-rules () ((_ () k) (??!apply k #t)) ((_ x k) (??!apply k #f))))
(define-syntax ?ifnumber-zero? (syntax-rules () ((_ () kt kf) (??!apply kt #t)) ((_ x kt kf) (??!apply kf #f))))
(define-syntax ?my-+ (syntax-rules () ((_ _?x _?y _?kg1159) (?ifnumber-zero? _?y (??!lambda (g1174) (??!apply _?kg1159 _?x)) (??!lambda (g1175) (?incr _?x (??!lambda (g1176) (?decr _?y (??!lambda (g1177) (?my-+ (??! g1176) (??! g1177) _?kg1159))))))))))
(define-syntax ?fibr (syntax-rules () ((_ _?x _?kg1161) (?ifnumber-zero? _?x (??!lambda (g1167) (?number-zero _?kg1161)) (??!lambda (g1168) (?decr _?x (??!lambda (g1166) (?number-zero? (??! g1166) (??!lambda (g1162) (?iftrue? (??! g1162) (??!lambda (g1169) (?number-one _?kg1161)) (??!lambda (g1170) (?decr _?x (??!lambda (g1165) (?fibr (??! g1165) (??!lambda (g1171) (?decr _?x (??!lambda (g1164) (?decr (??! g1164) (??!lambda (g1163) (?fibr (??! g1163) (??!lambda (g1173) (?my-+ (??! g1171) (??! g1173) _?kg1161))))))))))))))))))))))
(?fibr (((((((()))))))) (??!lambda (x) (display (quote (??! x)))))
(newline)